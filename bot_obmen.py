import requests, json, math
from datetime import datetime, timedelta

from config import TOKEN

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, ForceReply

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.contrib.fsm_storage.memory import MemoryStorage

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


bat = "‡∏ø"
rub = "‚ÇΩ"
manager = "rusbat_obmen"
order_group = -1001984281231
stats_group = -1001954374416


# –ü–∞—Ä—Å–∏–º –±–∏–Ω–∞–Ω—Å
def get_rate(fiat):
    headers = {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate, br",
        "Accept-Language": "en-GB,en-US;q=0.9,en;q=0.8",
        "Cache-Control": "no-cache",
        "Connection": "keep-alive",
        "Content-Length": "123",
        "content-type": "application/json",
        "Host": "p2p.binance.com",
        "Origin": "https://p2p.binance.com",
        "Pragma": "no-cache",
        "TE": "Trailers",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0"
    }

    data = {
        "asset": "USDT",
        "fiat": fiat,
        "merchantCheck": False,
        "page": 1,
        "payTypes": ["TinkoffNew", "RaiffeisenBank", "HomeCreditBank"] if fiat == "RUB" else None,
        "publisherType": None,
        "rows": 9,
        "tradeType": "BUY" if fiat == "RUB" else "SELL"
    }

    r = requests.post(
        'https://p2p.binance.com/bapi/c2c/v2/friendly/c2c/adv/search', 
        headers=headers, 
        json=data
    )
    # formatted_json = json.dumps(json.loads(str(r.text)), indent=2)
    # print(result["data"][0]["adv"]["price"])
    result = r.json()
    print(result)
    prices = [adv['adv']['price'] for adv in result['data']]
    return float( result["data"][len(result['data'])-1]["adv"]["price"] ) # –¥–æ—Å—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∞–π—Å (–ø–æ—Å–ª–µ–¥–Ω–µ–µ = rows-1)



##############################################################################################
# –ü–∞—Ä—Å–∏–º –±–∏–Ω–∞–Ω—Å –∏ —Å—á–∏—Ç–∞–µ–º –∫—É—Ä—Å –∏ –≥–æ—Ç–æ–≤–∏–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π
def kurs():
    rub2usdt = get_rate("RUB")
    usdt2bat = get_rate("THB")

    comi = 0
    my_kurs_raw = (rub2usdt / usdt2bat)*(1+comi/100)

    bat2rub = math.ceil(my_kurs_raw * 1000) / 1000
    rub2bat = math.ceil(1/my_kurs_raw * 1000) / 1000

    text = f'/kurs\n–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å {(datetime.now()+timedelta(hours=4)).strftime("%d.%m.%Y ‚Äî %H:%M")}:\n\nüáπüá≠1 THB = {bat2rub} RUB\nüá∑üá∫1 RUB = {rub2bat} THB\n\n'

    return bat2rub, rub2bat, text


##############################################################################################
# –®–∞–±–ª–æ–Ω –º–∞—Ä–∫–∞–ø–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu(chat_id):
    markup = InlineKeyboardMarkup(row_width=2)
    markup.row(InlineKeyboardButton(text=f"–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å", callback_data=f"cancel"))
    markup.row(InlineKeyboardButton(text=f"üü¢–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω", callback_data=f"calc"))
    markup.row(
        InlineKeyboardButton(text=f"–ü—Ä–∞–≤–∏–ª–∞", callback_data='rules'),
        InlineKeyboardButton(text=f"–ú–µ–Ω–µ–¥–∂–µ—Ä", url=f'https://t.me/{manager}')
    )

    bat2rub, rub2bat, text = kurs()

    await bot.send_message(
        chat_id = chat_id,
        text = text+"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ.",
        reply_markup=markup,
        parse_mode = "HTML"
    )

##############################################################################################
# –®–∞–±–ª–æ–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def statistics(message, name):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row( InlineKeyboardButton(text=f"–ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={message.chat.id}")    )
    await bot.send_message(
        chat_id = stats_group, 
        text = f"{message.chat.id}: <b>{name}</b> | @{message.chat.username}",
        reply_markup = markup,
        parse_mode = "HTML"
    )

##############################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start']) # chat_type=[types.ChatType.PRIVATE])
async def first_meeting(message: types.Message):
    await main_menu(message.chat.id)

    # –æ—Ç—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    await statistics(message, "/start")

    
    with open('rusbat_users.txt', 'a') as file:
        file.write(f'{message.from_user.id}\n')

##############################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /kurs
@dp.message_handler(commands=['kurs', 'menu', 'bot']) # chat_type=[types.ChatType.PRIVATE])
async def rates(message: types.Message):
    await main_menu(message.chat.id)

    # –æ—Ç—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    await statistics(message, "/kurs")
    

##############################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == 'cancel')
async def process_callback_cancel(callback_query: types.CallbackQuery):
    await main_menu(callback_query.message.chat.id)
    await bot.answer_callback_query(callback_query.id)

    # –æ—Ç—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    await statistics(callback_query.message, "'cancel/refresh'")



##############################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ - ForceReply()
@dp.callback_query_handler(lambda c: c.data == 'calc')
async def process_callback_calc(callback_query: types.CallbackQuery):
    bat2rub, rub2bat, text = kurs()

    await bot.send_message(
        chat_id = callback_query.message.chat.id,
        text = text+"<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:</b>",
        reply_markup = ForceReply(),
        parse_mode = "HTML"
    )
    await bot.answer_callback_query(callback_query.id)

    # –æ—Ç—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    await statistics(callback_query.message, "'–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—É–º–º—ã'")




##############################################################################################

# –í—ã–±—Ä–∞–ª —Å—É–º–º—É, –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏. –ê –µ—â–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–∂–µ –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É–º–º–µ, –∞ –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å, –∂–¥—ë–º –≤–∞—Å –≤ –≥–æ—Å—Ç–∏
@dp.callback_query_handler(lambda c: c.data.startswith('checkout'))
async def checkout(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –∫–æ–ª–±–∞–∫–∞
    data = callback_query.data.split(':')
    rub_receiving = data[1]
    bat_giving = data[2]


    markup = InlineKeyboardMarkup(row_width=3)
    markup.row(InlineKeyboardButton(text=f"–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", callback_data=f"time:ASAP:{rub_receiving}:{bat_giving}"))
    markup.row(
        # InlineKeyboardButton(text=f"–ß–µ—Ä–µ–∑ —á–∞—Å", callback_data=f"time:hour:{rub_receiving}:{bat_giving}"),
        # InlineKeyboardButton(text=f"–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è", callback_data=f"time:today:{rub_receiving}:{bat_giving}"),
        InlineKeyboardButton(text=f"–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data=f"time:other:{rub_receiving}:{bat_giving}")
    )
    markup.row(
        InlineKeyboardButton(text=f"–ü—Ä–∞–≤–∏–ª–∞", callback_data='rules'),
        InlineKeyboardButton(text=f"–ú–µ–Ω–µ–¥–∂–µ—Ä", url=f'https://t.me/{manager}'),
        InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')
    )

    await bot.send_message(
        chat_id = callback_query.message.chat.id, 
        #reply_to_message_id = callback_query.message.message_id,
        text = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–º–µ–Ω–µ:</b>\n\n–í—ã –æ—Ç–¥–∞—ë—Ç–µ: {rub_receiving} —Ä—É–±–ª–µ–πüá∑üá∫\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {bat_giving} –±–∞—Çüáπüá≠\n\n<b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è: </b>",
        reply_markup = markup,
        parse_mode = "HTML"
    )
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫
    await bot.answer_callback_query(callback_query.id, text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è")

    # –æ—Ç—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    await statistics(callback_query.message, f"–Ω–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {rub_receiving} —Ä—É–±–ª–µ–π ({bat_giving} –±–∞—Ç)")


##############################################################################################
##############################################################################################
##############################################################################################
##############################################################################################
##############################################################################################
##############################################################################################
##############################################################################################
##############################################################################################
##############################################################################################
##############################################################################################
##############################################################################################

class FormStates(StatesGroup):
    SET_PHONE = State()
    SET_ADDRESS = State()


##############################################################################################

# –í—ã–±—Ä–∞–ª time. –ê –µ—â–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–∂–µ –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É–º–º–µ, –∞ –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å, –∂–¥—ë–º –≤–∞—Å –≤ –≥–æ—Å—Ç–∏
@dp.callback_query_handler(lambda c: c.data.startswith('time'))
async def process_callback_set_address(callback_query: types.CallbackQuery, state: FSMContext):
    await FormStates.SET_ADDRESS.set()

    data = callback_query.data.split(':')
    when_time = "–í—Ä–µ–º—è: –ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ\n\n" if data[1] == "ASAP" else "" 

    when1 = "<b>–í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ:</b>\n\n"
    when2 = "<b>üè†–ê–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è/–∫–æ–Ω–¥–æ, –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—ã https://goo.gl/maps/wxoTuWXufwdrGr6o9 </b>\n\n"
    
    when3 = "–ê —Ç–∞–∫–∂–µ\n<b>üóí–õ—é–±—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã.</b>" if data[1] == "ASAP" else "–ê —Ç–∞–∫–∂–µ\n<b>‚è∞–í—Ä–µ–º—è (–∏ –ª—é–±—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã).</b>"

    rub_receiving = data[2]
    bat_giving = data[3]

    markup = InlineKeyboardMarkup(row_width=3)
    markup.row(
        InlineKeyboardButton(text=f"–ü—Ä–∞–≤–∏–ª–∞", callback_data='rules'),
        InlineKeyboardButton(text=f"–ú–µ–Ω–µ–¥–∂–µ—Ä", url=f'https://t.me/{manager}'),
        InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')
    )

    await bot.send_message(
        chat_id = callback_query.message.chat.id, 
        #reply_to_message_id = callback_query.message.message_id,
        text = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–º–µ–Ω–µ:</b>\n\n–í—ã –æ—Ç–¥–∞—ë—Ç–µ: {rub_receiving} —Ä—É–±–ª–µ–πüá∑üá∫\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {bat_giving} –±–∞—Çüáπüá≠\n\n{when_time}{when1}{when2}{when3}",
        reply_markup = ForceReply(),
        parse_mode = "HTML"
    )
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫
    await bot.answer_callback_query(callback_query.id, text = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å")

    # –æ—Ç—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    await statistics(callback_query.message, f"–£–∫–∞–∑–∞–ª –≤–µ—Ä–º—è {when_time}, –æ—Ç–∫—Ä—ã–ª –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞")

##############################################################################################
##############################################################################################
##############################################################################################
# SET_ADDRESS
@dp.message_handler(state=FormStates.SET_ADDRESS)
async def process_address(message: types.Message, state: FSMContext):
    # print(json.dumps(json.loads(str(message)), indent=4))
    address = str(message.text)

    await state.reset_state()

    info = message.reply_to_message.text.split('–í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ')[0]+"–ê–¥—Ä–µ—Å: "+address

    await bot.send_message(
        chat_id = message.chat.id, 
        text = f"<b>‚úÖ–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞‚úÖ</b>\n\n–û–∂–∏–¥–∞–π—Ç–µ, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä @{manager} —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n\n"+info+"\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /kurs",
        parse_mode = "HTML"
    )

    markup = InlineKeyboardMarkup(row_width=3)
    markup.row(
        InlineKeyboardButton(text=f"–ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={message.from_user.id}"),
        InlineKeyboardButton(text=f"–ü–∏–Ω–≥–∞–Ω—É—Ç—å", callback_data='ping'),
        InlineKeyboardButton(text=f"–°–ø–∞—Å–∏–±–æ", callback_data='thx')
    )
    await bot.send_message(
        chat_id = order_group,
        text = f"<b>–ù–û–í–´–ô –ó–ê–ö–ê–ó! from @{message.from_user.username} id: {message.from_user.id}</b>\n\n"+info,
        parse_mode = "HTML",
        reply_markup = markup
    )
    # –æ—Ç—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    await statistics(message, f"–≤–≤–µ–ª –∞–¥—Ä–µ—Å –∏ –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑: {address}")
##############################################################################################



# PS C:\Users\evgeniy\Desktop\obmexch> & C:/Users/evgeniy/AppData/Local/Microsoft/WindowsApps/python3.11.exe c:/Users/evgeniy/Desktop/obmexch/obmentest.py
# Updates were skipped successfully.
# hello hi we are online
# Task exception was never retrieved
# future: <Task finished name='Task-72' coro=<Dispatcher._process_polling_updates() done, defined at C:\Users\evgeniy\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\aiogram\dispatcher\dispatcher.py:407> exception=AttributeError("'NoneType' object has no attribute 'text'")>
# Traceback (most recent call last):
#   File "C:\Users\evgeniy\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\aiogram\dispatcher\dispatcher.py", line 415, in _process_polling_updates
#     for responses in itertools.chain.from_iterable(await self.process_updates(updates, fast)):
#                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#   File "C:\Users\evgeniy\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\aiogram\dispatcher\dispatcher.py", line 235, in process_updates
#     return await asyncio.gather(*tasks)
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#   File "C:\Users\evgeniy\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\aiogram\dispatcher\handler.py", line 117, in notify
#     response = await handler_obj.handler(*args, **partial_data)
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#   File "C:\Users\evgeniy\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\aiogram\dispatcher\dispatcher.py", line 256, in process_update
#     return await self.message_handlers.notify(update.message)
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#   File "C:\Users\evgeniy\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\aiogram\dispatcher\handler.py", line 117, in notify
#     response = await handler_obj.handler(*args, **partial_data)
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#   File "c:\Users\evgeniy\Desktop\obmexch\obmentest.py", line 273, in process_address
#     info = message.reply_to_message.text.split('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å')[0]+"–ê–¥—Ä–µ—Å: "+address
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# AttributeError: 'NoneType' object has no attribute 'text'









##############################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã —Å—É–º–º—ã ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
@dp.message_handler(chat_type=[types.ChatType.PRIVATE])
async def exchanges(message: types.Message):
    # print(json.dumps(json.loads(str(message)), indent=4))
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω: 
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, —Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–æ –∑–∞ –∫–æ–º–∞–Ω–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä //admin

    digits = ''.join(filter(lambda character: character.isdigit(), message.text or message.caption))

    bat2rub, rub2bat, text = kurs()
    m_text = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ.\n\n"+text

    markup = InlineKeyboardMarkup(row_width=2) # –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É

    if digits:
        digit_bat = int(int(digits)*rub2bat)
        # digit_rub = int(int(digits)*bat2rub)
        m_text = text+f"–í–∞—à —Ä–∞—Å—á—ë—Ç:\n\n–í—ã –¥–∞—ë—Ç–µ {digits} —Ä—É–±–ª–µ–π, –∞ –ø–æ–ª—É—á–∞–µ—Ç–µ {digit_bat} –±–∞—Ç\n\n<b>‚ùóÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.</b> –õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É @{manager}"

        markup.row(InlineKeyboardButton(text=f"‚úÖ–î–∞—é {digits} {rub}, –ø–æ–ª—É—á–∞—é {digit_bat} {bat}", callback_data=f"checkout:{digits}:{digit_bat}"))
        # markup.row(InlineKeyboardButton(text=f"2Ô∏è‚É£–î–∞—é {digit_rub} {rub}, –ø–æ–ª—É—á–∞—é {digits} {bat}", callback_data=f"checkout:{digit_rub}:{digits}"))


    markup.row(
        InlineKeyboardButton(text=f"–ü—Ä–∞–≤–∏–ª–∞", callback_data='rules'),
        InlineKeyboardButton(text=f"–ú–µ–Ω–µ–¥–∂–µ—Ä", url=f'https://t.me/{manager}'),
        InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')
    )
    await message.reply(
        text = m_text,
        reply_markup=markup,
        parse_mode = "HTML"
    )


    # –æ—Ç—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
    await statistics(message, f"–≤–≤–æ–¥ —Å—É–º–º—ã: {message.text or message.caption}")

##############################################################################################

##############################################################################################
# RULES
@dp.callback_query_handler(lambda c: c.data == 'rules')
async def process_callback_rules(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "1. –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö –ø–æ –≥–æ—Ä–æ–¥—É –æ—Ç 30 –º–∏–Ω—É—Ç\n\n2. –ï—Å–ª–∏ –≤—ã —Ä—è–¥–æ–º –≤ —Ä–∞–π–æ–Ω–µ –ü—Ä–∞—Ç–∞–º–Ω–∞–∫, —Ç–æ –µ—â–µ –±—ã—Å—Ç—Ä–µ–µ\n\n3. –ö—É—Ä—Å –∏ –∫–æ–Ω–µ—á–Ω–∞—è —Å—É–º–º–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ –≤–æ –≤—Ä–µ–º—è –æ–±–º–µ–Ω–∞.", show_alert=True)
















# rub2usdt = get_rate("RUB")
# usdt2bat = get_rate("THB")
# suma = 50000
# for i in range(10):
#     kurs = rub2usdt / usdt2bat * (1+i/100)
#     print(f"""{i}% –∫–æ–º–∏—Å—Å–∏—è: –ï—Å–ª–∏ –ø—Ä–æ–¥–∞—Ç—å {suma} –±–∞—Ç –ø–æ –∫—É—Ä—Å—É {kurs}, —Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è {suma*kurs} —Ä—É–±–ª–µ–π, PROFIT={suma*kurs-suma*rub2usdt / usdt2bat}""")




# Function that runs on startup
async def on_start(_):
    print("hello hi we are online")

# Main function
if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_start, skip_updates=True)